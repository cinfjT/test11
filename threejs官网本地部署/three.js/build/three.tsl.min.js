/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{TSL as e}from"three/webgpu";const t=e.BRDF_GGX,r=e.BRDF_Lambert,a=e.BasicShadowFilter,o=e.Break,i=e.Continue,n=e.DFGApprox,l=e.D_GGX,s=e.Discard,c=e.EPSILON,m=e.F_Schlick,p=e.Fn,d=e.INFINITY,u=e.If,g=e.Loop,h=e.NodeShaderStage,x=e.NodeType,f=e.NodeUpdateType,b=e.NodeAccess,w=e.PCFShadowFilter,v=e.PCFSoftShadowFilter,S=e.PI,T=e.PI2,_=e.Return,V=e.Schlick_to_F0,y=e.ScriptableNodeResources,M=e.ShaderNode,D=e.TBNViewMatrix,F=e.VSMShadowFilter,C=e.V_GGX_SmithCorrelated,I=e.abs,P=e.acesFilmicToneMapping,R=e.acos,N=e.add,B=e.addNodeElement,L=e.agxToneMapping,k=e.all,A=e.alphaT,G=e.and,O=e.anisotropy,W=e.anisotropyB,j=e.anisotropyT,U=e.any,z=e.append,q=e.array,E=e.arrayBuffer,Z=e.asin,X=e.assign,Y=e.atan,H=e.atan2,J=e.atomicAdd,K=e.atomicAnd,Q=e.atomicFunc,$=e.atomicMax,ee=e.atomicMin,te=e.atomicOr,re=e.atomicStore,ae=e.atomicSub,oe=e.atomicXor,ie=e.atomicLoad,ne=e.attenuationColor,le=e.attenuationDistance,se=e.attribute,ce=e.attributeArray,me=e.backgroundBlurriness,pe=e.backgroundIntensity,de=e.backgroundRotation,ue=e.batch,ge=e.billboarding,he=e.bitAnd,xe=e.bitNot,fe=e.bitOr,be=e.bitXor,we=e.bitangentGeometry,ve=e.bitangentLocal,Se=e.bitangentView,Te=e.bitangentWorld,_e=e.bitcast,Ve=e.blendBurn,ye=e.blendColor,Me=e.blendDodge,De=e.blendOverlay,Fe=e.blendScreen,Ce=e.blur,Ie=e.bool,Pe=e.buffer,Re=e.bufferAttribute,Ne=e.bumpMap,Be=e.burn,Le=e.bvec2,ke=e.bvec3,Ae=e.bvec4,Ge=e.bypass,Oe=e.cache,We=e.call,je=e.cameraFar,Ue=e.cameraIndex,ze=e.cameraNear,qe=e.cameraNormalMatrix,Ee=e.cameraPosition,Ze=e.cameraProjectionMatrix,Xe=e.cameraProjectionMatrixInverse,Ye=e.cameraViewMatrix,He=e.cameraWorldMatrix,Je=e.cbrt,Ke=e.cdl,Qe=e.ceil,$e=e.checker,et=e.cineonToneMapping,tt=e.clamp,rt=e.clearcoat,at=e.clearcoatRoughness,ot=e.code,it=e.color,nt=e.colorSpaceToWorking,lt=e.colorToDirection,st=e.compute,ct=e.computeSkinning,mt=e.cond,pt=e.Const,dt=e.context,ut=e.convert,gt=e.convertColorSpace,ht=e.convertToTexture,xt=e.cos,ft=e.cross,bt=e.cubeTexture,wt=e.dFdx,vt=e.dFdy,St=e.dashSize,Tt=e.debug,_t=e.defaultBuildStages,Vt=e.defaultShaderStages,yt=e.defined,Mt=e.degrees,Dt=e.deltaTime,Ft=e.densityFog,Ct=e.densityFogFactor,It=e.depth,Pt=e.depthPass,Rt=e.difference,Nt=e.diffuseColor,Bt=e.directPointLight,Lt=e.directionToColor,kt=e.dispersion,At=e.distance,Gt=e.div,Ot=e.dodge,Wt=e.dot,jt=e.drawIndex,Ut=e.dynamicBufferAttribute,zt=e.element,qt=e.emissive,Et=e.equal,Zt=e.equals,Xt=e.equirectUV,Yt=e.exp,Ht=e.exp2,Jt=e.expression,Kt=e.faceDirection,Qt=e.faceForward,$t=e.faceforward,er=e.float,tr=e.floor,rr=e.fog,ar=e.fract,or=e.frameGroup,ir=e.frameId,nr=e.frontFacing,lr=e.fwidth,sr=e.gain,cr=e.gapSize,mr=e.getConstNodeType,pr=e.getCurrentStack,dr=e.getDirection,ur=e.getDistanceAttenuation,gr=e.getGeometryRoughness,hr=e.getNormalFromDepth,xr=e.getParallaxCorrectNormal,fr=e.getRoughness,br=e.getScreenPosition,wr=e.getShIrradianceAt,vr=e.getTextureIndex,Sr=e.getViewPosition,Tr=e.getShadowMaterial,_r=e.getShadowRenderObjectFunction,Vr=e.glsl,yr=e.glslFn,Mr=e.grayscale,Dr=e.greaterThan,Fr=e.greaterThanEqual,Cr=e.hash,Ir=e.highpModelNormalViewMatrix,Pr=e.highpModelViewMatrix,Rr=e.hue,Nr=e.instance,Br=e.instanceIndex,Lr=e.instancedArray,kr=e.instancedBufferAttribute,Ar=e.instancedDynamicBufferAttribute,Gr=e.instancedMesh,Or=e.int,Wr=e.inverseSqrt,jr=e.inversesqrt,Ur=e.invocationLocalIndex,zr=e.invocationSubgroupIndex,qr=e.ior,Er=e.iridescence,Zr=e.iridescenceIOR,Xr=e.iridescenceThickness,Yr=e.ivec2,Hr=e.ivec3,Jr=e.ivec4,Kr=e.js,Qr=e.label,$r=e.length,ea=e.lengthSq,ta=e.lessThan,ra=e.lessThanEqual,aa=e.lightPosition,oa=e.lightShadowMatrix,ia=e.lightTargetDirection,na=e.lightTargetPosition,la=e.lightViewPosition,sa=e.lightingContext,ca=e.lights,ma=e.linearDepth,pa=e.linearToneMapping,da=e.localId,ua=e.globalId,ga=e.log,ha=e.log2,xa=e.logarithmicDepthToViewZ,fa=e.loop,ba=e.luminance,wa=e.mediumpModelViewMatrix,va=e.mat2,Sa=e.mat3,Ta=e.mat4,_a=e.matcapUV,Va=e.materialAO,ya=e.materialAlphaTest,Ma=e.materialAnisotropy,Da=e.materialAnisotropyVector,Fa=e.materialAttenuationColor,Ca=e.materialAttenuationDistance,Ia=e.materialClearcoat,Pa=e.materialClearcoatNormal,Ra=e.materialClearcoatRoughness,Na=e.materialColor,Ba=e.materialDispersion,La=e.materialEmissive,ka=e.materialIOR,Aa=e.materialIridescence,Ga=e.materialIridescenceIOR,Oa=e.materialIridescenceThickness,Wa=e.materialLightMap,ja=e.materialLineDashOffset,Ua=e.materialLineDashSize,za=e.materialLineGapSize,qa=e.materialLineScale,Ea=e.materialLineWidth,Za=e.materialMetalness,Xa=e.materialNormal,Ya=e.materialOpacity,Ha=e.materialPointSize,Ja=e.materialReference,Ka=e.materialReflectivity,Qa=e.materialRefractionRatio,$a=e.materialRotation,eo=e.materialRoughness,to=e.materialSheen,ro=e.materialSheenRoughness,ao=e.materialShininess,oo=e.materialSpecular,io=e.materialSpecularColor,no=e.materialSpecularIntensity,lo=e.materialSpecularStrength,so=e.materialThickness,co=e.materialTransmission,mo=e.max,po=e.maxMipLevel,uo=e.metalness,go=e.min,ho=e.mix,xo=e.mixElement,fo=e.mod,bo=e.modInt,wo=e.modelDirection,vo=e.modelNormalMatrix,So=e.modelPosition,To=e.modelRadius,_o=e.modelScale,Vo=e.modelViewMatrix,yo=e.modelViewPosition,Mo=e.modelViewProjection,Do=e.modelWorldMatrix,Fo=e.modelWorldMatrixInverse,Co=e.morphReference,Io=e.mrt,Po=e.mul,Ro=e.mx_aastep,No=e.mx_cell_noise_float,Bo=e.mx_contrast,Lo=e.mx_fractal_noise_float,ko=e.mx_fractal_noise_vec2,Ao=e.mx_fractal_noise_vec3,Go=e.mx_fractal_noise_vec4,Oo=e.mx_hsvtorgb,Wo=e.mx_noise_float,jo=e.mx_noise_vec3,Uo=e.mx_noise_vec4,zo=e.mx_ramplr,qo=e.mx_ramptb,Eo=e.mx_rgbtohsv,Zo=e.mx_safepower,Xo=e.mx_splitlr,Yo=e.mx_splittb,Ho=e.mx_srgb_texture_to_lin_rec709,Jo=e.mx_transform_uv,Ko=e.mx_worley_noise_float,Qo=e.mx_worley_noise_vec2,$o=e.mx_worley_noise_vec3,ei=e.negate,ti=e.neutralToneMapping,ri=e.nodeArray,ai=e.nodeImmutable,oi=e.nodeObject,ii=e.nodeObjects,ni=e.nodeProxy,li=e.normalFlat,si=e.normalGeometry,ci=e.normalLocal,mi=e.normalMap,pi=e.normalView,di=e.normalWorld,ui=e.normalize,gi=e.not,hi=e.notEqual,xi=e.numWorkgroups,fi=e.objectDirection,bi=e.objectGroup,wi=e.objectPosition,vi=e.objectRadius,Si=e.objectScale,Ti=e.objectViewPosition,_i=e.objectWorldMatrix,Vi=e.oneMinus,yi=e.or,Mi=e.orthographicDepthToViewZ,Di=e.oscSawtooth,Fi=e.oscSine,Ci=e.oscSquare,Ii=e.oscTriangle,Pi=e.output,Ri=e.outputStruct,Ni=e.overlay,Bi=e.overloadingFn,Li=e.parabola,ki=e.parallaxDirection,Ai=e.parallaxUV,Gi=e.parameter,Oi=e.pass,Wi=e.passTexture,ji=e.pcurve,Ui=e.perspectiveDepthToViewZ,zi=e.pmremTexture,qi=e.pointUV,Ei=e.pointWidth,Zi=e.positionGeometry,Xi=e.positionLocal,Yi=e.positionPrevious,Hi=e.positionView,Ji=e.positionViewDirection,Ki=e.positionWorld,Qi=e.positionWorldDirection,$i=e.posterize,en=e.pow,tn=e.pow2,rn=e.pow3,an=e.pow4,on=e.property,nn=e.radians,ln=e.rand,sn=e.range,cn=e.rangeFog,mn=e.rangeFogFactor,pn=e.reciprocal,dn=e.lightProjectionUV,un=e.reference,gn=e.referenceBuffer,hn=e.reflect,xn=e.reflectVector,fn=e.reflectView,bn=e.reflector,wn=e.refract,vn=e.refractVector,Sn=e.refractView,Tn=e.reinhardToneMapping,_n=e.remainder,Vn=e.remap,yn=e.remapClamp,Mn=e.renderGroup,Dn=e.renderOutput,Fn=e.rendererReference,Cn=e.rotate,In=e.rotateUV,Pn=e.roughness,Rn=e.round,Nn=e.rtt,Bn=e.sRGBTransferEOTF,Ln=e.sRGBTransferOETF,kn=e.sampler,An=e.samplerComparison,Gn=e.saturate,On=e.saturation,Wn=e.screen,jn=e.screenCoordinate,Un=e.screenSize,zn=e.screenUV,qn=e.scriptable,En=e.scriptableValue,Zn=e.select,Xn=e.setCurrentStack,Yn=e.shaderStages,Hn=e.shadow,Jn=e.pointShadow,Kn=e.shadowPositionWorld,Qn=e.sharedUniformGroup,$n=e.shapeCircle,el=e.sheen,tl=e.sheenRoughness,rl=e.shiftLeft,al=e.shiftRight,ol=e.shininess,il=e.sign,nl=e.sin,ll=e.sinc,sl=e.skinning,cl=e.smoothstep,ml=e.smoothstepElement,pl=e.specularColor,dl=e.specularF90,ul=e.spherizeUV,gl=e.split,hl=e.spritesheetUV,xl=e.sqrt,fl=e.stack,bl=e.step,wl=e.storage,vl=e.storageBarrier,Sl=e.storageObject,Tl=e.storageTexture,_l=e.string,Vl=e.struct,yl=e.sub,Ml=e.subgroupIndex,Dl=e.subgroupSize,Fl=e.tan,Cl=e.tangentGeometry,Il=e.tangentLocal,Pl=e.tangentView,Rl=e.tangentWorld,Nl=e.temp,Bl=e.texture,Ll=e.texture3D,kl=e.textureBarrier,Al=e.textureBicubic,Gl=e.textureCubeUV,Ol=e.textureLoad,Wl=e.textureSize,jl=e.textureStore,Ul=e.thickness,zl=e.threshold,ql=e.time,El=e.timerDelta,Zl=e.timerGlobal,Xl=e.timerLocal,Yl=e.toOutputColorSpace,Hl=e.toWorkingColorSpace,Jl=e.toneMapping,Kl=e.toneMappingExposure,Ql=e.toonOutlinePass,$l=e.transformDirection,es=e.transformNormal,ts=e.transformNormalToView,rs=e.transformedBentNormalView,as=e.transformedBitangentView,os=e.transformedBitangentWorld,is=e.transformedClearcoatNormalView,ns=e.transformedNormalView,ls=e.transformedNormalWorld,ss=e.transformedTangentView,cs=e.transformedTangentWorld,ms=e.transmission,ps=e.transpose,ds=e.tri,us=e.tri3,gs=e.triNoise3D,hs=e.triplanarTexture,xs=e.triplanarTextures,fs=e.trunc,bs=e.tslFn,ws=e.uint,vs=e.uniform,Ss=e.uniformArray,Ts=e.uniformGroup,_s=e.uniforms,Vs=e.userData,ys=e.uv,Ms=e.uvec2,Ds=e.uvec3,Fs=e.uvec4,Cs=e.Var,Is=e.varying,Ps=e.varyingProperty,Rs=e.vec2,Ns=e.vec3,Bs=e.vec4,Ls=e.vectorComponents,ks=e.velocity,As=e.vertexColor,Gs=e.vertexIndex,Os=e.vibrance,Ws=e.viewZToLogarithmicDepth,js=e.viewZToOrthographicDepth,Us=e.viewZToPerspectiveDepth,zs=e.viewport,qs=e.viewportBottomLeft,Es=e.viewportCoordinate,Zs=e.viewportDepthTexture,Xs=e.viewportLinearDepth,Ys=e.viewportMipTexture,Hs=e.viewportResolution,Js=e.viewportSafeUV,Ks=e.viewportSharedTexture,Qs=e.viewportSize,$s=e.viewportTexture,ec=e.viewportTopLeft,tc=e.viewportUV,rc=e.wgsl,ac=e.wgslFn,oc=e.workgroupArray,ic=e.workgroupBarrier,nc=e.workgroupId,lc=e.workingToColorSpace,sc=e.xor;export{t as BRDF_GGX,r as BRDF_Lambert,a as BasicShadowFilter,o as Break,pt as Const,i as Continue,n as DFGApprox,l as D_GGX,s as Discard,c as EPSILON,m as F_Schlick,p as Fn,d as INFINITY,u as If,g as Loop,b as NodeAccess,h as NodeShaderStage,x as NodeType,f as NodeUpdateType,w as PCFShadowFilter,v as PCFSoftShadowFilter,S as PI,T as PI2,_ as Return,V as Schlick_to_F0,y as ScriptableNodeResources,M as ShaderNode,D as TBNViewMatrix,F as VSMShadowFilter,C as V_GGX_SmithCorrelated,Cs as Var,I as abs,P as acesFilmicToneMapping,R as acos,N as add,B as addNodeElement,L as agxToneMapping,k as all,A as alphaT,G as and,O as anisotropy,W as anisotropyB,j as anisotropyT,U as any,z as append,q as array,E as arrayBuffer,Z as asin,X as assign,Y as atan,H as atan2,J as atomicAdd,K as atomicAnd,Q as atomicFunc,ie as atomicLoad,$ as atomicMax,ee as atomicMin,te as atomicOr,re as atomicStore,ae as atomicSub,oe as atomicXor,ne as attenuationColor,le as attenuationDistance,se as attribute,ce as attributeArray,me as backgroundBlurriness,pe as backgroundIntensity,de as backgroundRotation,ue as batch,ge as billboarding,he as bitAnd,xe as bitNot,fe as bitOr,be as bitXor,we as bitangentGeometry,ve as bitangentLocal,Se as bitangentView,Te as bitangentWorld,_e as bitcast,Ve as blendBurn,ye as blendColor,Me as blendDodge,De as blendOverlay,Fe as blendScreen,Ce as blur,Ie as bool,Pe as buffer,Re as bufferAttribute,Ne as bumpMap,Be as burn,Le as bvec2,ke as bvec3,Ae as bvec4,Ge as bypass,Oe as cache,We as call,je as cameraFar,Ue as cameraIndex,ze as cameraNear,qe as cameraNormalMatrix,Ee as cameraPosition,Ze as cameraProjectionMatrix,Xe as cameraProjectionMatrixInverse,Ye as cameraViewMatrix,He as cameraWorldMatrix,Je as cbrt,Ke as cdl,Qe as ceil,$e as checker,et as cineonToneMapping,tt as clamp,rt as clearcoat,at as clearcoatRoughness,ot as code,it as color,nt as colorSpaceToWorking,lt as colorToDirection,st as compute,ct as computeSkinning,mt as cond,dt as context,ut as convert,gt as convertColorSpace,ht as convertToTexture,xt as cos,ft as cross,bt as cubeTexture,wt as dFdx,vt as dFdy,St as dashSize,Tt as debug,_t as defaultBuildStages,Vt as defaultShaderStages,yt as defined,Mt as degrees,Dt as deltaTime,Ft as densityFog,Ct as densityFogFactor,It as depth,Pt as depthPass,Rt as difference,Nt as diffuseColor,Bt as directPointLight,Lt as directionToColor,kt as dispersion,At as distance,Gt as div,Ot as dodge,Wt as dot,jt as drawIndex,Ut as dynamicBufferAttribute,zt as element,qt as emissive,Et as equal,Zt as equals,Xt as equirectUV,Yt as exp,Ht as exp2,Jt as expression,Kt as faceDirection,Qt as faceForward,$t as faceforward,er as float,tr as floor,rr as fog,ar as fract,or as frameGroup,ir as frameId,nr as frontFacing,lr as fwidth,sr as gain,cr as gapSize,mr as getConstNodeType,pr as getCurrentStack,dr as getDirection,ur as getDistanceAttenuation,gr as getGeometryRoughness,hr as getNormalFromDepth,xr as getParallaxCorrectNormal,fr as getRoughness,br as getScreenPosition,wr as getShIrradianceAt,Tr as getShadowMaterial,_r as getShadowRenderObjectFunction,vr as getTextureIndex,Sr as getViewPosition,ua as globalId,Vr as glsl,yr as glslFn,Mr as grayscale,Dr as greaterThan,Fr as greaterThanEqual,Cr as hash,Ir as highpModelNormalViewMatrix,Pr as highpModelViewMatrix,Rr as hue,Nr as instance,Br as instanceIndex,Lr as instancedArray,kr as instancedBufferAttribute,Ar as instancedDynamicBufferAttribute,Gr as instancedMesh,Or as int,Wr as inverseSqrt,jr as inversesqrt,Ur as invocationLocalIndex,zr as invocationSubgroupIndex,qr as ior,Er as iridescence,Zr as iridescenceIOR,Xr as iridescenceThickness,Yr as ivec2,Hr as ivec3,Jr as ivec4,Kr as js,Qr as label,$r as length,ea as lengthSq,ta as lessThan,ra as lessThanEqual,aa as lightPosition,dn as lightProjectionUV,oa as lightShadowMatrix,ia as lightTargetDirection,na as lightTargetPosition,la as lightViewPosition,sa as lightingContext,ca as lights,ma as linearDepth,pa as linearToneMapping,da as localId,ga as log,ha as log2,xa as logarithmicDepthToViewZ,fa as loop,ba as luminance,va as mat2,Sa as mat3,Ta as mat4,_a as matcapUV,Va as materialAO,ya as materialAlphaTest,Ma as materialAnisotropy,Da as materialAnisotropyVector,Fa as materialAttenuationColor,Ca as materialAttenuationDistance,Ia as materialClearcoat,Pa as materialClearcoatNormal,Ra as materialClearcoatRoughness,Na as materialColor,Ba as materialDispersion,La as materialEmissive,ka as materialIOR,Aa as materialIridescence,Ga as materialIridescenceIOR,Oa as materialIridescenceThickness,Wa as materialLightMap,ja as materialLineDashOffset,Ua as materialLineDashSize,za as materialLineGapSize,qa as materialLineScale,Ea as materialLineWidth,Za as materialMetalness,Xa as materialNormal,Ya as materialOpacity,Ha as materialPointSize,Ja as materialReference,Ka as materialReflectivity,Qa as materialRefractionRatio,$a as materialRotation,eo as materialRoughness,to as materialSheen,ro as materialSheenRoughness,ao as materialShininess,oo as materialSpecular,io as materialSpecularColor,no as materialSpecularIntensity,lo as materialSpecularStrength,so as materialThickness,co as materialTransmission,mo as max,po as maxMipLevel,wa as mediumpModelViewMatrix,uo as metalness,go as min,ho as mix,xo as mixElement,fo as mod,bo as modInt,wo as modelDirection,vo as modelNormalMatrix,So as modelPosition,To as modelRadius,_o as modelScale,Vo as modelViewMatrix,yo as modelViewPosition,Mo as modelViewProjection,Do as modelWorldMatrix,Fo as modelWorldMatrixInverse,Co as morphReference,Io as mrt,Po as mul,Ro as mx_aastep,No as mx_cell_noise_float,Bo as mx_contrast,Lo as mx_fractal_noise_float,ko as mx_fractal_noise_vec2,Ao as mx_fractal_noise_vec3,Go as mx_fractal_noise_vec4,Oo as mx_hsvtorgb,Wo as mx_noise_float,jo as mx_noise_vec3,Uo as mx_noise_vec4,zo as mx_ramplr,qo as mx_ramptb,Eo as mx_rgbtohsv,Zo as mx_safepower,Xo as mx_splitlr,Yo as mx_splittb,Ho as mx_srgb_texture_to_lin_rec709,Jo as mx_transform_uv,Ko as mx_worley_noise_float,Qo as mx_worley_noise_vec2,$o as mx_worley_noise_vec3,ei as negate,ti as neutralToneMapping,ri as nodeArray,ai as nodeImmutable,oi as nodeObject,ii as nodeObjects,ni as nodeProxy,li as normalFlat,si as normalGeometry,ci as normalLocal,mi as normalMap,pi as normalView,di as normalWorld,ui as normalize,gi as not,hi as notEqual,xi as numWorkgroups,fi as objectDirection,bi as objectGroup,wi as objectPosition,vi as objectRadius,Si as objectScale,Ti as objectViewPosition,_i as objectWorldMatrix,Vi as oneMinus,yi as or,Mi as orthographicDepthToViewZ,Di as oscSawtooth,Fi as oscSine,Ci as oscSquare,Ii as oscTriangle,Pi as output,Ri as outputStruct,Ni as overlay,Bi as overloadingFn,Li as parabola,ki as parallaxDirection,Ai as parallaxUV,Gi as parameter,Oi as pass,Wi as passTexture,ji as pcurve,Ui as perspectiveDepthToViewZ,zi as pmremTexture,Jn as pointShadow,qi as pointUV,Ei as pointWidth,Zi as positionGeometry,Xi as positionLocal,Yi as positionPrevious,Hi as positionView,Ji as positionViewDirection,Ki as positionWorld,Qi as positionWorldDirection,$i as posterize,en as pow,tn as pow2,rn as pow3,an as pow4,on as property,nn as radians,ln as rand,sn as range,cn as rangeFog,mn as rangeFogFactor,pn as reciprocal,un as reference,gn as referenceBuffer,hn as reflect,xn as reflectVector,fn as reflectView,bn as reflector,wn as refract,vn as refractVector,Sn as refractView,Tn as reinhardToneMapping,_n as remainder,Vn as remap,yn as remapClamp,Mn as renderGroup,Dn as renderOutput,Fn as rendererReference,Cn as rotate,In as rotateUV,Pn as roughness,Rn as round,Nn as rtt,Bn as sRGBTransferEOTF,Ln as sRGBTransferOETF,kn as sampler,An as samplerComparison,Gn as saturate,On as saturation,Wn as screen,jn as screenCoordinate,Un as screenSize,zn as screenUV,qn as scriptable,En as scriptableValue,Zn as select,Xn as setCurrentStack,Yn as shaderStages,Hn as shadow,Kn as shadowPositionWorld,$n as shapeCircle,Qn as sharedUniformGroup,el as sheen,tl as sheenRoughness,rl as shiftLeft,al as shiftRight,ol as shininess,il as sign,nl as sin,ll as sinc,sl as skinning,cl as smoothstep,ml as smoothstepElement,pl as specularColor,dl as specularF90,ul as spherizeUV,gl as split,hl as spritesheetUV,xl as sqrt,fl as stack,bl as step,wl as storage,vl as storageBarrier,Sl as storageObject,Tl as storageTexture,_l as string,Vl as struct,yl as sub,Ml as subgroupIndex,Dl as subgroupSize,Fl as tan,Cl as tangentGeometry,Il as tangentLocal,Pl as tangentView,Rl as tangentWorld,Nl as temp,Bl as texture,Ll as texture3D,kl as textureBarrier,Al as textureBicubic,Gl as textureCubeUV,Ol as textureLoad,Wl as textureSize,jl as textureStore,Ul as thickness,zl as threshold,ql as time,El as timerDelta,Zl as timerGlobal,Xl as timerLocal,Yl as toOutputColorSpace,Hl as toWorkingColorSpace,Jl as toneMapping,Kl as toneMappingExposure,Ql as toonOutlinePass,$l as transformDirection,es as transformNormal,ts as transformNormalToView,rs as transformedBentNormalView,as as transformedBitangentView,os as transformedBitangentWorld,is as transformedClearcoatNormalView,ns as transformedNormalView,ls as transformedNormalWorld,ss as transformedTangentView,cs as transformedTangentWorld,ms as transmission,ps as transpose,ds as tri,us as tri3,gs as triNoise3D,hs as triplanarTexture,xs as triplanarTextures,fs as trunc,bs as tslFn,ws as uint,vs as uniform,Ss as uniformArray,Ts as uniformGroup,_s as uniforms,Vs as userData,ys as uv,Ms as uvec2,Ds as uvec3,Fs as uvec4,Is as varying,Ps as varyingProperty,Rs as vec2,Ns as vec3,Bs as vec4,Ls as vectorComponents,ks as velocity,As as vertexColor,Gs as vertexIndex,Os as vibrance,Ws as viewZToLogarithmicDepth,js as viewZToOrthographicDepth,Us as viewZToPerspectiveDepth,zs as viewport,qs as viewportBottomLeft,Es as viewportCoordinate,Zs as viewportDepthTexture,Xs as viewportLinearDepth,Ys as viewportMipTexture,Hs as viewportResolution,Js as viewportSafeUV,Ks as viewportSharedTexture,Qs as viewportSize,$s as viewportTexture,ec as viewportTopLeft,tc as viewportUV,rc as wgsl,ac as wgslFn,oc as workgroupArray,ic as workgroupBarrier,nc as workgroupId,lc as workingToColorSpace,sc as xor};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
